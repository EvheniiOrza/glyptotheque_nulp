// utils/qrGenerator.ts
import supabase from './supabaseClient'
import QRCode from 'qrcode'

export async function saveQRToSupabase(sculptureId: string): Promise<void> {
    try {
        const url = `${process.env.NEXT_PUBLIC_SITE_URL}/gallery/${sculptureId}`

        console.log('üîó –ì–µ–Ω–µ—Ä—É—î–º–æ QR –¥–ª—è URL:', url)

        // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è QR-–∫–æ–¥—É —è–∫ Data URL
        const qrDataUrl = await QRCode.toDataURL(url, {
            width: 400,
            margin: 2,
            color: {
                dark: '#d4af37',
                light: '#ffffff'
            }
        })

        // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è Data URL –≤ Blob
        const response = await fetch(qrDataUrl)
        const blob = await response.blob()

        // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É
        const fileName = `qr_${sculptureId}.png`
        console.log('üì§ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª:', fileName)

        const { error: uploadError } = await supabase.storage
            .from('qrcodes')
            .upload(fileName, blob, {
                contentType: 'image/png',
                upsert: true
            })

        if (uploadError) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:', uploadError)

            // –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ RLS, —Å–ø—Ä–æ–±—É—î–º–æ –∑–±–µ—Ä–µ–≥—Ç–∏ —Ç—ñ–ª—å–∫–∏ Data URL
            if (uploadError.message.includes('row-level security')) {
                console.log('üîÑ RLS –ø–æ–º–∏–ª–∫–∞, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ Data URL')
                await saveQRDataURLOnly(sculptureId, qrDataUrl)
                return
            }
            throw uploadError
        }

        // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—É–±–ª—ñ—á–Ω–æ–≥–æ URL
        const { data: publicUrlData } = supabase.storage
            .from('qrcodes')
            .getPublicUrl(fileName)

        const publicUrl = publicUrlData?.publicUrl

        if (!publicUrl) {
            throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—É–±–ª—ñ—á–Ω–∏–π URL')
        }

        console.log('üì∑ –ü—É–±–ª—ñ—á–Ω–∏–π URL QR-–∫–æ–¥—É:', publicUrl)

        // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ —Ç–∞–±–ª–∏—Ü—é
        const { error: insertError } = await supabase
            .from('sculpture_qr_codes')
            .insert({
                sculpture_id: sculptureId,
                qr_url: publicUrl
            })

        if (insertError) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –±–∞–∑—É:', insertError)
            throw insertError
        }

        console.log('‚úÖ QR-–∫–æ–¥ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ storage —Ç–∞ –±–∞–∑—É –¥–∞–Ω–∏—Ö')

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ QR-–∫–æ–¥—É:', error)
        throw error
    }
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥: –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ Data URL
async function saveQRDataURLOnly(sculptureId: string, qrDataUrl: string): Promise<void> {
    try {
        console.log('üíæ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ QR-–∫–æ–¥ —è–∫ Data URL –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö...')

        const { error: insertError } = await supabase
            .from('sculpture_qr_codes')
            .insert({
                sculpture_id: sculptureId,
                qr_url: qrDataUrl
            })

        if (insertError) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è Data URL:', insertError)
            throw insertError
        }

        console.log('‚úÖ QR-–∫–æ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ Data URL –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö')

    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º—É –º–µ—Ç–æ–¥—ñ:', error)
        throw error
    }
}

// –°–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –±–µ–∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Buffer
export async function saveQRToSupabaseSimple(sculptureId: string): Promise<string> {
    try {
        const url = `${process.env.NEXT_PUBLIC_SITE_URL}/gallery/${sculptureId}`

        // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è QR-–∫–æ–¥—É —è–∫ Data URL
        const qrDataUrl = await QRCode.toDataURL(url, {
            width: 400,
            margin: 2,
            color: {
                dark: '#d4af37',
                light: '#000000'
            }
        })

        // –°–ø—Ä–æ–±–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤ storage
        try {
            const response = await fetch(qrDataUrl)
            const blob = await response.blob()
            const fileName = `qr_${sculptureId}.png`

            const { error: uploadError } = await supabase.storage
                .from('qrcodes')
                .upload(fileName, blob, {
                    contentType: 'image/png',
                    upsert: true
                })

            if (!uploadError) {
                // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—É–±–ª—ñ—á–Ω–æ–≥–æ URL
                const { data: publicUrlData } = supabase.storage
                    .from('qrcodes')
                    .getPublicUrl(fileName)

                if (publicUrlData?.publicUrl) {
                    await saveQRToDatabase(sculptureId, publicUrlData.publicUrl)
                    return publicUrlData.publicUrl
                }
            }
        } catch (storageError) {
            console.warn('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤ storage, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Data URL')
        }

        // –Ø–∫—â–æ storage –Ω–µ –ø—Ä–∞—Ü—é—î, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ Data URL
        await saveQRToDatabase(sculptureId, qrDataUrl)
        return qrDataUrl

    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó QR-–∫–æ–¥—É:', error)
        throw error
    }
}

// –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
async function saveQRToDatabase(sculptureId: string, qrUrl: string): Promise<void> {
    const { error } = await supabase
        .from('sculpture_qr_codes')
        .insert({
            sculpture_id: sculptureId,
            qr_url: qrUrl
        })

    if (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è QR –≤ –±–∞–∑—É:', error)
        throw error
    }
}

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è QR-–∫–æ–¥—É –∑–∞ sculpture_id
export async function getQRCodeBySculptureId(sculptureId: string) {
    try {
        const { data, error } = await supabase
            .from('sculpture_qr_codes')
            .select('*')
            .eq('sculpture_id', sculptureId)
            .single()

        if (error) throw error
        return data
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ QR-–∫–æ–¥—É:', error)
        return null
    }
}

// –í–∏–¥–∞–ª–µ–Ω–Ω—è QR-–∫–æ–¥—É
export async function deleteQRCode(sculptureId: string): Promise<void> {
    try {
        // –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É –∑ storage (—è–∫—â–æ –≤—ñ–Ω —Ç–∞–º)
        const fileName = `qr_${sculptureId}.png`
        const { error: storageError } = await supabase.storage
            .from('qrcodes')
            .remove([fileName])

        if (storageError && !storageError.message.includes('NotFound')) {
            console.warn('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ storage:', storageError)
        }

        // –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –∑ —Ç–∞–±–ª–∏—Ü—ñ
        const { error: deleteError } = await supabase
            .from('sculpture_qr_codes')
            .delete()
            .eq('sculpture_id', sculptureId)

        if (deleteError) throw deleteError

        console.log(`‚úÖ QR-–∫–æ–¥ –≤–∏–¥–∞–ª–µ–Ω–æ –¥–ª—è —Å–∫—É–ª—å–ø—Ç—É—Ä–∏ ${sculptureId}`)
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ QR-–∫–æ–¥—É:', error)
        throw error
    }
}